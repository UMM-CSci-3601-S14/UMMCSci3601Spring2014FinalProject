// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.welcomeView = (function(_super) {
    var thePrompt;

    __extends(welcomeView, _super);

    function welcomeView() {
      return welcomeView.__super__.constructor.apply(this, arguments);
    }

    welcomeView.prototype.tagName = 'div';

    welcomeView.prototype.template = _.template($('#welcomePage').html());

    welcomeView.prototype.events = {
      'click button.submitEssay': 'submitEssay',
      'click button#hideResults': 'hideResults'
    };

    thePrompt = null;

    welcomeView.prototype.initialize = function() {
      thePrompt = new prompt().fetch().done(function() {
        $('#promptTitle').html('Prompt: ' + thePrompt.responseJSON.text);
        $('#promptDescription').html(thePrompt.responseJSON.description);
        return console.log(thePrompt);
      });
      this.render();
    };

    welcomeView.prototype.render = function() {
      this.$el.html(this.template());
      return this;
    };

    welcomeView.prototype.submitEssay = function() {
      var theAuthor;
      $('#sandboxResults').show(1000);
      return theAuthor = new author({
        designator: "BG2",
        email: "test@gmail.com"
      }).fetch().done(function() {
        var theAnswerSet;
        console.log(theAuthor);
        return theAnswerSet = new ourAnswerSet({}).fetch().done(function() {
          var theAnswer;
          console.log(theAnswerSet);
          return theAnswer = new answer({
            author: theAuthor.responseJSON.results[0].url,
            answer_set: theAnswerSet.responseJSON.url,
            text: $('#essayContents').val()
          }).save().done(function() {
            var thePredictionTask;
            console.log(theAnswer);
            return thePredictionTask = new predictionTask({
              answer_set: theAnswerSet.responseJSON.url,
              trained_model: thePrompt.responseJSON.default_models[0]
            }).save().done(function() {
              var theProcess;
              console.log(thePredictionTask.responseJSON.process);
              theProcess = new predictionProcess();
              theProcess.urlRoot = thePredictionTask.responseJSON.process;
              return theProcess.save().done(function() {
                var count, looping, thePredictionStatus;
                thePredictionStatus = new predictionStatus();
                console.log("----------------------------------------");
                count = 0;
                return looping = setInterval((function() {
                  count++;
                  thePredictionStatus.urlRoot = theProcess.attributes.prediction_task.slice(0, 4) + "s" + theProcess.attributes.prediction_task.slice(4);
                  return thePredictionStatus.fetch().done(function() {
                    var thePredictionResult;
                    console.log("Prediction Task status: " + thePredictionStatus.attributes.status);
                    console.log(theProcess.attributes.prediction_task);
                    if (thePredictionStatus.attributes.status === 'S') {
                      console.log("Prediction Task was SUCCESSFUL");
                      console.log("exited while loop");
                      thePredictionResult = new predictionResult().fetch().done(function() {
                        var answerGraded;
                        console.log(thePredictionResult.responseJSON);
                        console.log(thePredictionResult.responseJSON.results[0]);
                        return answerGraded = new answer;
                      });
                      console.log(count);
                      window.clearInterval(looping);
                    }
                    if (thePredictionStatus.attributes.status === 'U') {
                      console.log("Prediction Task was UNSUCCESSFUL");
                      return window.clearInterval(looping);
                    }
                  });
                }), 1000);
              });
            });
          });
        });
      });
    };

    welcomeView.prototype.hideResults = function() {
      return $('#sandboxResults').hide(1000);
    };

    return welcomeView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=welcomeView.map
