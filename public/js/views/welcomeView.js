// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.welcomeView = (function(_super) {
    __extends(welcomeView, _super);

    function welcomeView() {
      return welcomeView.__super__.constructor.apply(this, arguments);
    }

    welcomeView.prototype.tagName = 'div';

    welcomeView.prototype.template = _.template($('#welcomePage').html());

    welcomeView.prototype.events = {
      'click button.submitEssay': 'submitEssay',
      'click button#hideResults': 'hideResults'
    };

    welcomeView.prototype.initialize = function() {
      var thePrompt;
      thePrompt = new prompt().fetch().done(function() {
        return console.log(thePrompt);
      });
      this.render();
    };

    welcomeView.prototype.render = function() {
      this.$el.html(this.template());
      return this;
    };

    welcomeView.prototype.submitEssay = function() {
      var thePrompt;
      $('#sandboxResults').show(1000);
      return thePrompt = new prompt().fetch().done(function() {
        var theAuthor;
        console.log(thePrompt);
        $('#promptContents').html(thePrompt.responseJSON.text);
        return theAuthor = new author({
          designator: "BG2",
          email: "test@gmail.com"
        }).fetch().done(function() {
          var theAnswerSet;
          console.log(theAuthor);
          return theAnswerSet = new ourAnswerSet({}).fetch().done(function() {
            var theAnswer;
            console.log(theAnswerSet);
            return theAnswer = new answer({
              author: theAuthor.responseJSON.results[0].url,
              answer_set: theAnswerSet.responseJSON.url,
              text: $('#essayContents').val()
            }).save().done(function() {
              var thePredictionTask;
              console.log(theAnswer);
              return thePredictionTask = new predictionTask({
                answer_set: theAnswerSet.responseJSON.url,
                trained_model: thePrompt.responseJSON.default_models[0]
              }).save().done(function() {
                var thePredictionResult;
                return thePredictionResult = new predictionResult().fetch().done(function() {
                  var answerGraded;
                  console.log(thePredictionResult.responseJSON);
                  return answerGraded = new answer;
                });
              });
            });
          });
        });
      });
    };

    welcomeView.prototype.hideResults = function() {
      return $('#sandboxResults').hide(1000);
    };

    return welcomeView;

  })(Backbone.View);

}).call(this);

//# sourceMappingURL=welcomeView.map
