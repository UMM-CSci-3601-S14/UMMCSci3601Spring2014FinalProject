// Generated by CoffeeScript 1.7.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.modelView = (function(_super) {
    __extends(modelView, _super);

    function modelView() {
      return modelView.__super__.constructor.apply(this, arguments);
    }

    modelView.prototype.tagName = 'div';

    modelView.prototype.template = _.template($('#modelPage').html());

    modelView.prototype.events = {
      'click button#createPrompt': 'createPrompt',
      'click button#hideWait': 'hideWait',
      'click button#uploadCSV': 'uploadCSV',
      'click button#makeCSV': 'makeCSV',
      'click button#uploadZip': 'uploadZip'
    };

    modelView.prototype.initialize = function() {
      return this.render();
    };

    modelView.prototype.render = function() {
      console.log('Model');
      this.$el.html(this.template());
      return this;
    };

    modelView.prototype.createPrompt = function() {
      var newClass, newDescription, newPrompt, newText, newTitle;
      console.log('in function');
      $('#waitingForModel').show(1000);
      newTitle = $('#title').val();
      newText = $('#title').val();
      newDescription = $('#description').val();
      newClass = $('#cDescription').val();
      return newPrompt = new createPrompt({
        title: newTitle,
        text: newText,
        description: newDescription
      }).save().done(function() {
        var newCorpus;
        console.log(newPrompt.responseJSON.url);
        return newCorpus = new createCorpora({
          prompt: newPrompt.responseJSON.url,
          description: newClass
        }).save().done(function() {
          var newCorpusUpload;
          return newCorpusUpload = new corpusUploadTasks().fetch().done(function() {
            var s3Request;
            s3Request = new request();
            s3Request.url = 'https://try-api.lightsidelabs.com/api/corpus-upload-parameters';
            return s3Request.fetch().done(function() {
              var form, xhr;
              form = new FormData();
              form.append('AWSAccessKeyId', s3Request.attributes.access_key_id);
              form.append('key', s3Request.attributes.key);
              form.append('policy', s3Request.attributes.policy);
              form.append('signature', s3Request.attributes.signature);
              form.append('acl', 'public-read');
              form.append('success_action_status', '201');
              form.append('file', $('#file').get(0).files[0]);
              xhr = new XMLHttpRequest();
              xhr.open('POST', "https://lightsidelabs-try.s3.amazonaws.com/", true);
              xhr.onreadystatechange = function() {
                var newUploadTask, s3Key;
                if (xhr.readyState === 4) {
                  s3Key = $(xhr.responseXML).find("Key").first().text();
                  console.log(s3Key);
                  return newUploadTask = new corpusUploadTasks({
                    corpus: newCorpus.responseJSON.url,
                    s3_key: s3Key,
                    content_type: 'text/csv'
                  }).save().done(function() {
                    var uploadQueue;
                    uploadQueue = new request();
                    uploadQueue.urlRoot = newUploadTask.responseJSON.process;
                    return uploadQueue.save().done(function() {
                      var count, looping, uploadTask;
                      uploadTask = new request();
                      console.log(newUploadTask.responseJSON.url);
                      uploadTask.urlRoot = newUploadTask.responseJSON.url;
                      count = 0;
                      looping;
                      return looping = setInterval((function() {
                        count++;
                        return uploadTask.fetch().done(function() {
                          var trainingTask;
                          if (uploadTask.attributes.status === 'S') {
                            console.log("Upload Task was SUCCESSFUL");
                            console.log(newUploadTask.responseJSON);
                            console.log(count);
                            trainingTask = new trainingTasks({
                              corpus: newCorpus.responseJSON.url
                            }).save().done(function() {
                              var addTrainTask;
                              addTrainTask = new request();
                              addTrainTask.url = trainingTask.responseJSON.process;
                              return addTrainTask.save().done(function() {
                                var pollTrainTask, trainTaskLoop;
                                console.log(addTrainTask);
                                pollTrainTask = new request();
                                pollTrainTask.url = trainingTask.responseJSON.url;
                                return trainTaskLoop = setInterval((function() {
                                  return pollTrainTask.fetch().done(function() {
                                    var finalPrompt;
                                    if (pollTrainTask.attributes.status === 'S') {
                                      window.alert('Training task was SUCCESSFUL');
                                      finalPrompt = new createPrompt({
                                        title: newPrompt.responseJSON.title,
                                        text: newPrompt.responseJSON.text,
                                        description: newPrompt.responseJSON.description,
                                        default_models: [pollTrainTask.attributes.trained_model]
                                      });
                                      finalPrompt.save().done(function() {});
                                      window.clearInterval(trainTaskLoop);
                                    }
                                    if (pollTrainTask.attributes.status === 'U') {
                                      window.alert('Training task was UNSUCCESSFUL');
                                      return window.clearInterval(trainTaskLoop);
                                    }
                                  });
                                }), 1000);
                              });
                            });
                            window.clearInterval(looping);
                          }
                          if (uploadTask.attributes.status === 'U') {
                            console.log("Prediction Task was UNSUCCESSFUL");
                            window.clearInterval(looping);
                            return window.alert("Your Model Has Failed. Please review your csv for the proper format and try again.");
                          }
                        });
                      }), 1000);
                    });
                  });
                }
              };
              return xhr.send(form);
            });
          });
        });
      });
    };

    modelView.prototype.uploadCSV = function() {
      if ($("#promptTitle").val() === "") {
        return window.alert("Please enter the prompt title");
      } else if ($("#promptDescription").val() === "") {
        return window.alert("Please enter the prompt description");
      } else if ($("#cDescription").val() === "") {
        return window.alert("Please enter the class description");
      } else {
        fieldCollapse();
        return $('#uploadBox').html(new window.uploadCSVView().$el);
      }
    };

    modelView.prototype.uploadZip = function() {
      if ($("#promptTitle").val() === "") {
        return window.alert("Please enter the prompt title");
      } else if ($("#promptDescription").val() === "") {
        return window.alert("Please enter the prompt description");
      } else if ($("#cDescription").val() === "") {
        return window.alert("Please enter the class description");
      } else {
        fieldCollapse();
        return $('#uploadBox').html(new window.uploadZipView().$el);
      }
    };

    modelView.prototype.makeCSV = function() {
      if ($("#promptTitle").val() === "") {
        return window.alert("Please enter the prompt title");
      } else if ($("#promptDescription").val() === "") {
        return window.alert("Please enter the prompt description");
      } else if ($("#cDescription").val() === "") {
        return window.alert("Please enter the class description");
      } else {
        fieldCollapse();
        $('#uploadBox').html(new window.CSVView().$el);
        $('#welcomeTut').hide();
        return $('#makeTut').show();
      }
    };

    modelView.prototype.hideResults = function() {
      return $('#waitingForModel').hide(1000);
    };

    return modelView;

  })(Backbone.View);

  this;

}).call(this);

//# sourceMappingURL=modelView.map
